import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import SuperJSON from "superjson";
import { LoadingPage } from "~/components/Loading";
import { PostsView } from "~/components/PostView";
import { PageLayout } from "~/components/layout";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";

const ProfileFeed = ({ userId }: { userId: string }) => {
  const { data, isLoading } = api.posts.getPostsByUserId.useQuery({ userId });

  if (isLoading) return <LoadingPage />;

  if (!data || !data.length) return <div>User has no posts</div>;

  console.log(data);

  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostsView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    username,
  });

  // explicitly checking for username because of template literal in title
  if (!data || !data.username) return <div>User not found</div>;

  return (
    <>
      <Head>
        <title>{`Chirp | ${data.username}'s Profile`}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <PageLayout>
        <div className="relative flex h-36 items-center gap-6 bg-slate-600 p-4">
          <Image
            src={data.profileImageUrl}
            alt={`@${data.username ?? ""}'s profile image`}
            className="absolute -bottom-[64px] rounded-full border-[5px] border-black bg-black"
            width={128}
            height={128}
          />
        </div>
        <div className="h-[64px]" />
        <div className="p-4 text-2xl font-semibold">{`@${
          data.username ?? ""
        }`}</div>
        <div className="border-b border-slate-400" />
        <ProfileFeed userId={data.id} />
      </PageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (ctx) => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: SuperJSON, // optional - adds superjson serialization
  });

  const slug = ctx.params?.slug;

  if (typeof slug !== "string") throw new Error("No Slug");

  const username = slug.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ username });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default ProfilePage;
